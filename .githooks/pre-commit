#!/bin/bash
# Pre-commit hook to ensure documentation is updated before commits

set -e

echo "🔍 Running pre-commit documentation checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}✅ $2${NC}"
    else
        echo -e "${RED}❌ $2${NC}"
    fi
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

# Check if CHANGELOG.md exists
if [ ! -f "CHANGELOG.md" ]; then
    print_status 1 "CHANGELOG.md not found in root directory"
    exit 1
fi
print_status 0 "CHANGELOG.md exists in root directory"

# Check if CHANGELOG.md has been modified in this commit
if git diff --cached --name-only | grep -q "CHANGELOG.md"; then
    print_status 0 "CHANGELOG.md is being updated in this commit"
else
    # Check for significant changes that should be documented
    FEAT_CHANGES=$(git diff --cached --name-only | grep -E '\.(jsx?|tsx?|css|md)$' | wc -l)
    
    if [ $FEAT_CHANGES -gt 0 ]; then
        # Check if this commit has feat: or fix: in the message
        COMMIT_MSG_FILE=".git/COMMIT_EDITMSG"
        if [ -f "$COMMIT_MSG_FILE" ]; then
            if grep -q "^feat:\|^fix:\|^BREAKING:" "$COMMIT_MSG_FILE"; then
                print_warning "Significant changes detected but CHANGELOG.md not updated"
                echo "Consider updating CHANGELOG.md for this commit"
            fi
        fi
    fi
fi

# Check CHANGELOG.md format
if ! grep -q "## \[Unreleased\]" CHANGELOG.md; then
    print_status 1 "CHANGELOG.md missing [Unreleased] section"
    exit 1
fi
print_status 0 "CHANGELOG.md format is valid"

# Check for proper chronological order (newest first)
FIRST_VERSION=$(grep "^## \[" CHANGELOG.md | head -2 | tail -1 | sed 's/.*\[\([^]]*\)\].*/\1/')
SECOND_VERSION=$(grep "^## \[" CHANGELOG.md | head -3 | tail -1 | sed 's/.*\[\([^]]*\)\].*/\1/')

if [ "$FIRST_VERSION" != "Unreleased" ] && [ -n "$SECOND_VERSION" ]; then
    # Basic version comparison (assumes semantic versioning)
    if [[ "$FIRST_VERSION" > "$SECOND_VERSION" ]] || [[ "$FIRST_VERSION" == "$SECOND_VERSION" ]]; then
        print_status 0 "CHANGELOG.md versions in correct chronological order"
    else
        print_status 1 "CHANGELOG.md versions not in chronological order (newest first)"
        echo "First version: $FIRST_VERSION, Second version: $SECOND_VERSION"
        exit 1
    fi
fi

# Check documentation links in README.md
if [ -f "README.md" ]; then
    if grep -q "\[.*\](docs/" README.md; then
        print_status 0 "README.md contains documentation links"
    else
        print_warning "README.md may be missing documentation links"
    fi
fi

# Run lint check
if command -v npm >/dev/null 2>&1; then
    if npm run lint >/dev/null 2>&1; then
        print_status 0 "Lint checks passed"
    else
        print_status 1 "Lint checks failed"
        echo "Run 'npm run lint' to see specific issues"
        exit 1
    fi
else
    print_warning "npm not found, skipping lint check"
fi

# Check for common documentation files
DOC_FILES=("docs/README.md" "docs/development/getting-started.md" "docs/components/")
for file in "${DOC_FILES[@]}"; do
    if [ -e "$file" ]; then
        print_status 0 "Documentation file/directory exists: $file"
    else
        print_warning "Documentation file/directory missing: $file"
    fi
done

# Check for TODO comments in code that might need documentation
TODO_COUNT=$(git diff --cached | grep -c "TODO\|FIXME\|XXX" || true)
if [ $TODO_COUNT -gt 0 ]; then
    print_warning "$TODO_COUNT TODO/FIXME comments found in staged changes"
    echo "Consider documenting these items or creating issues"
fi

echo ""
echo -e "${GREEN}🚀 Pre-commit documentation checks completed successfully!${NC}"
echo ""

exit 0